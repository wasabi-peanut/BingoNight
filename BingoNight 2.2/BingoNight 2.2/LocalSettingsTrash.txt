-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {

NSString *name = [alertView textFieldAtIndex:0].text;


//1 means colors
//2 means grid

if (buttonIndex==1 && name.length>0) {


if (_alertNumber == 1) {

[_arrayPickerPresets addObject:name];
[DefaultsDataManager saveData:_arrayPickerPresets forKey:_keyForArrayPickerPresets];
[_pickerPresets reloadAllComponents];

[_arrayGameColorSettingsShell addObject:_arrayGameColorSettingsShell[_presetSelected]];


[DefaultsDataManager saveData:_arrayGameColorSettingsShell forKey:_keyForGameColorSettingsShell];


}

if (_alertNumber ==2) {

[_arrayPickerGrids addObject:name];
[DefaultsDataManager saveData:_arrayPickerGrids forKey:_keyForPickerGrids];
[_arrayGridsShell addObject:_arrayGridsShell[_gridSelected]];


//Add a blank grid here


}

[_pickerPresets reloadAllComponents];



}

}


//  [self saveSettings];

/*if (_changeHappened == YES) {

UIAlertView *saveAlert = [[UIAlertView alloc] initWithTitle:@"Save" message:@"Do you want to save before changing views?" delegate:self cancelButtonTitle:@"Yes, save it" otherButtonTitles:@"No, don't save it", nil];
[saveAlert show];
_changeHappened = NO;
}*/




/*-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
switch (buttonIndex) {
case 0:
[self saveSettings:self];
[self createGameSettingsArray];
[self applySetupDisplay];

break;

case 1:
[self createGameSettingsArray];
[self applySetupDisplay];

break;

default:
break;
}
_changeHappened = NO;


}*/

---
All of the original array codes below. Starting Over

//CREATE PICKER ARRAYS

-(void)createPickerArray {

_arrayPickerGameColors = [[NSMutableArray alloc] initWithObjects:
@"Background", @"Box Background",@"Box Text",@"Called Background",@"Called Text",@"BINGO Letters",@"Game Title Color",@"Edit Name/Grid", nil];

_arrayPickerGameNumber = [[NSMutableArray alloc] init];

NSString *arrayItem;
for (int z=1; z<=_numberOfGames; z++) {
switch (z) {
case 1:
arrayItem = @"Game One";
break;
case 2:
arrayItem = @"Game Two";
break;
case 3:
arrayItem = @"Game Three";
break;
case 4:
arrayItem = @"Game Four";
break;
case 5:
arrayItem = @"Game Five";
break;
case 6:
arrayItem = @"Game Six";
break;
case 7:
arrayItem = @"Game Seven";
break;
case 8:
arrayItem = @"Game Eight";
break;
case 9:
arrayItem = @"Game Nine";
break;
case 10:
arrayItem = @"Game Ten";
break;
case 11:
arrayItem = @"Game Eleven";
break;
case 12:
arrayItem = @"Game Twelve";
break;

default:
break;
}

[_arrayPickerGameNumber addObject:arrayItem];

}

_arrayPickerPresets = [[NSMutableArray alloc] initWithObjects:@"Preset One",@"Preset Two", nil];

_arrayPickerGrids =[[NSMutableArray alloc]initWithObjects:@"Straight", nil];




}

-(void)createPresetColorArrays {



_arrayPresetOne = [[NSMutableArray alloc] initWithObjects:@0,@0,@0,@155,@0,
@0,@0,@0,@155,@155,
@100,@165,@190,@190,@190,
@0,@0,@200,@0,@0,
@100,
@"Design One",
//22 objects so far
//add 25 1's for grid. Count starts at 22 for grid.
/*   @1,@0,@0,@0,@1,
@1,@0,@0,@1,@0,
@1,@0,@1,@0,@0,
@1,@1,@0,@0,@0,
@1,@1,@1,@1,@1,*/

nil];


_arrayPresetTwo = [[NSMutableArray alloc] initWithObjects:@100,@100,@100,@155,@0,
@0,@0,@0,@155,@155,
@100,@165,@190,@190,@190,
@0,@0,@200,@0,@0,
@100,
@"Design Two",
//22 objects so far
//add 25 1's for grid. Count starts at 22 for grid.
@1,@1,@1,@1,@1,
@1,@1,@1,@1,@1,
@1,@1,@0,@1,@1,
@1,@1,@1,@1,@1,
@1,@1,@1,@1,@1,

nil];

/*

_arrayPresetThree = [[NSMutableArray alloc] initWithObjects:@10,@50,@100,@155,@0,
@200,@200,@0,@155,@155,
@100,@165,@190,@190,@190,
@0,@0,@200,@0,@0,
@100,
@"Design Three",
//22 objects so far
//add 25 1's for grid. Count starts at 22 for grid.
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,

nil];
_arrayAddedPreset = [[NSMutableArray alloc] initWithObjects:@10,@50,@100,@155,@0,
@200,@200,@0,@155,@155,
@100,@165,@190,@190,@190,
@0,@0,@200,@0,@0,
@100,
@"Custom Design",
//22 objects so far
//add 25 1's for grid. Count starts at 22 for grid.
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
@1,@0,@1,@0,@1,
nil];
*/


_arrayAllPresets = [[NSMutableArray alloc] initWithObjects:_arrayPresetOne, _arrayPresetTwo, nil];




}




-(void)createGameArrays {
//Create or look up GameSettings,GridSettings,ColorSettings and Game Number

switch (_gameNumber) {
case 1:
_keyForCoordinates = @"keyGameOne";
break;
case 2:
_keyForCoordinates = @"keyGameTwo";
break;
case 3:
_keyForCoordinates = @"keyGameThree";
break;
case 4:
_keyForCoordinates = @"keyGameFour";
break;
case 5:
_keyForCoordinates = @"keyGameFive";
break;
case 6:
_keyForCoordinates = @"keyGameSix";
break;
case 7:
_keyForCoordinates = @"keyGameSeven";
break;
case 8:
_keyForCoordinates = @"keyGameEight";
break;
case 9:
_keyForCoordinates = @"keyGameNine";
break;
case 10:
_keyForCoordinates = @"keyGameTen";
break;
case 11:
_keyForCoordinates = @"keyGameEleven";
break;
case 12:
_keyForCoordinates = @"keyGameTweleve";
break;
default:
_keyForCoordinates = @"keyGameDefault";
break;
}

_keyForNumberOfGames = @"keyNumberOfGames";
_keyForCoordinates = @"keyForCoordinates";





_arrayCoordinatesGameSettings = [[NSMutableArray alloc] initWithArray:[DefaultsDataManager getDataForKey:_keyForCoordinates]];
_numberOfGames = [[DefaultsDataManager getDataForKey:_keyForNumberOfGames]integerValue];
_arrayGameColorSettings = [[NSMutableArray alloc] initWithArray:[DefaultsDataManager getDataForKey:_keyForGameSettings]];

if (_numberOfGames == 0) {
_numberOfGames = 8;
}




if (![_arrayGameColorSettings count]) {
_arrayGameColorSettings = [[NSMutableArray alloc] initWithObjects:
@255,@255,@255,@255,@0,
@0,@0,@0,@255,@255,
@100,@165,@130,@130,@130,
@0,@0,@255,@0,@0,
@255,
@"Name of Game",
//22 objects so far
//add 25 1's for grid. Count starts at 22 for grid.
/* @0,@1,@1,@1,@0,
@0,@1,@1,@0,@1,
@0,@1,@0,@1,@1,
@0,@0,@1,@1,@1,
@0,@0,@0,@0,@0,*/

nil];

}
if (![_arrayCoordinatesGameSettings count]) {
_arrayCoordinatesGameSettings = [[NSMutableArray alloc] initWithObjects:
@0,@0,@0,@0,
nil];

}
if (![_arrayGridPatterns count]) {
_arrayGridPatterns = [[NSMutableArray alloc] initWithObjects:
@"Straight",
@1,@0,@0,@0,@0,
@1,@1,@1,@0,@0,
@1,@0,@1,@0,@0,
@1,@0,@0,@1,@0,
@1,@1,@1,@1,@1,
nil];


}



[self applySetupDisplay];

}

-----------

/*  if (_changeHappened ==YES) {
UIAlertView *saveAlert = [[UIAlertView alloc] initWithTitle:@"Save" message:@"Do you want to give up custom changes? If not, switch game number first" delegate:self cancelButtonTitle:@"Yes, I do" otherButtonTitles:@"No, I don't", nil];
[saveAlert show];
}
else {
//   [self applySetupDisplay];
//   [self saveSettings];
//  [self createGameArrays];
_changeHappened = NO;
}*/



DISPLAY STUFF DELETED AND REPLACED...
-(void)applySetupDisplay {

/*  UILabel *currentLabel = [UILabel alloc];

[_pickerMarkerColors selectRow:[_arrayGameColorSettings[21] integerValue] inComponent:0 animated:YES];

switch (_attributeNumber) {
case 1:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:0]floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:1] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:2] floatValue];

break;


case 2:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:3] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:4] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:5] floatValue];

break;
case 3:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:6] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:7] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:8] floatValue];

break;
case 4:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:9] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:10] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:11] floatValue];

break;
case 5:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:12] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:13] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:14] floatValue];
break;

case 6:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:15] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:16] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:17] floatValue];
break;

case 7:

_sliderRed.value = [[_arrayGameColorSettings objectAtIndex:18] floatValue];
_sliderGreen.value = [[_arrayGameColorSettings objectAtIndex:19] floatValue];
_sliderBlue.value = [[_arrayGameColorSettings objectAtIndex:20] floatValue];


break;

default:
break;
}

for (int count = 0; count < 1; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.backgroundColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:0] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:1] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:2] floatValue]/255 alpha:1];
}

for (int count = 7; count <9; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.backgroundColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:0] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:1] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:2] floatValue]/255 alpha:1];}

for (int count = 1; count <5; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.backgroundColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:3] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:4] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:5] floatValue]/255 alpha:1];
_gridBackgroundColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:3] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:4] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:5] floatValue]/255 alpha:1];
}


for (int count = 1; count <5; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.textColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:6] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:7] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:8] floatValue]/255 alpha:1];

}

for (int count = 5; count <7; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.backgroundColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:9] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:10] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:11] floatValue]/255 alpha:1];
}

for (int count = 5; count <7; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.textColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:12] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:13] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:14] floatValue]/255 alpha:1];
}

for (int count = 7; count <9; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.textColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:15] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:16] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:17] floatValue]/255 alpha:1];
}

for (int count = 9; count <10; count++) {
currentLabel = [_arrayDisplayButtons objectAtIndex:count];
currentLabel.textColor = [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:18] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:19] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:20] floatValue]/255 alpha:1];
}
_textFieldNameOfGame.text = [_arrayCoordinatesNameOfGame objectAtIndex:_gameNumber];
_textFieldNameOfGame.backgroundColor =  [UIColor colorWithRed:[[_arrayGameColorSettings objectAtIndex:0] floatValue]/255 green:[[_arrayGameColorSettings objectAtIndex:1] floatValue]/255 blue:[[_arrayGameColorSettings objectAtIndex:2] floatValue]/255 alpha:1];


_textFieldRedValue.text = [NSString stringWithFormat:@"%0.f",_sliderRed.value];
_textFieldGreenValue.text = [NSString stringWithFormat:@"%0.f",_sliderGreen.value];
_textFieldBlueValue.text = [NSString stringWithFormat:@"%0.f",_sliderBlue.value];



//[self createDisplayGrid];
[self gridButtons];

}


- (IBAction)updateNameOfGame:(id)sender {
NSString *nameOfGame = _textFieldNameOfGame.text;
[_arrayCoordinatesNameOfGame replaceObjectAtIndex:_gameNumber withObject:nameOfGame];
[DefaultsDataManager saveData:_arrayCoordinatesNameOfGame forKey:_keyForCoordinatesNameOfGame];


*/
}

-(void)makeDisplayButtons {

//For array, box is 0, buttons 1-6, and letters 7 & 8, textFieldNameOfGame is 9

_arrayDisplayButtons = [[NSMutableArray alloc] init];

float startX= 40;
float startY = 100;
float horizontalGap = 10;
float verticalGap = 5;
float width = _width/10;
float height = width;
float useX = 0;
float useY = 0;

NSString *buttonText = @"1";


//box around buttons
UILabel *boxAroundButtons = [[UILabel alloc] initWithFrame:CGRectMake(startX -20, startY -20, width * 4 + 25 + 4*horizontalGap, height * 2 + 2*verticalGap + 35)];
boxAroundButtons.backgroundColor = [UIColor whiteColor];
boxAroundButtons.layer.borderColor = [[UIColor blackColor] CGColor];
boxAroundButtons.layer.borderWidth = 4;

//TEMP BLOCK
// [self.view addSubview:boxAroundButtons];

[_arrayDisplayButtons addObject:boxAroundButtons];
//buttons including called buttons
for (int i=0; i<6; i++) {
if (i<3) {
useX= (startX + width + horizontalGap) + i*(width + horizontalGap);
useY= startY;
buttonText = [NSString stringWithFormat:@"%d",i];


}
else {
useX= (startX + width +horizontalGap) + (i-3)*(width + horizontalGap);
useY= startY +height + verticalGap;
buttonText = [NSString stringWithFormat:@"%d",i+13];
}

UILabel *labelDisplayButtons = [[UILabel alloc] initWithFrame:CGRectMake(useX, useY, width, height)];

labelDisplayButtons.backgroundColor = [UIColor redColor];
labelDisplayButtons.layer.borderColor = [[UIColor blackColor] CGColor];
labelDisplayButtons.layer.borderWidth = 1;
labelDisplayButtons.text = buttonText;
labelDisplayButtons.textColor = [UIColor blackColor];
labelDisplayButtons.font = [UIFont fontWithName:@"Marker Felt" size:56];
labelDisplayButtons.textAlignment = NSTextAlignmentCenter;
//TEMP BLOCK
//[self.view addSubview:labelDisplayButtons];

[_arrayDisplayButtons addObject:labelDisplayButtons];
}
//letters

for (int j=0; j<2; j++) {

useX = startX ;
useY = startY + j*(height +verticalGap);

UILabel *labelDisplayLabels = [[UILabel alloc] initWithFrame:CGRectMake(useX, useY, width, height)];


labelDisplayLabels.backgroundColor = [UIColor whiteColor];
if (j==0) {
labelDisplayLabels.text = @"B";

}
else {
labelDisplayLabels.text = @"I";

}

labelDisplayLabels.font = [UIFont fontWithName:@"Marker Felt" size:75];
labelDisplayLabels.textAlignment = NSTextAlignmentCenter;
labelDisplayLabels.adjustsFontSizeToFitWidth = YES;

// TEMP BLOCK
//  [self.view addSubview:labelDisplayLabels];
[self.view bringSubviewToFront:labelDisplayLabels];


[_arrayDisplayButtons addObject:labelDisplayLabels];

}

//title of game

/*for (int t=0; t<1; t++) {
width = 5*(_width/15);
height = _width/16;
useX = _width - _width/2.5;
useY = _width/15;


_textFieldNameOfGame = [[UITextField alloc] initWithFrame:CGRectMake(useX, useY, width, height)];

[_textFieldNameOfGame setDelegate:self];


*/

_textFieldNameOfGame.layer.borderColor = [[UIColor blackColor] CGColor];
_textFieldNameOfGame.layer.borderWidth = 2;
_textFieldNameOfGame.font = [UIFont fontWithName:@"Helvetica" size:100];
_textFieldNameOfGame.textAlignment = NSTextAlignmentCenter;
_textFieldNameOfGame.adjustsFontSizeToFitWidth = YES;


//   _textFieldNameOfGame.text = [_arrayGameColorSettings objectAtIndex:21];

_textFieldNameOfGame.enabled = NO;

[_textFieldNameOfGame addTarget:self action:@selector(updateNameOfGame:) forControlEvents:UIControlEventEditingDidEnd];

//    [self.view addSubview:_textFieldNameOfGame];

[_arrayDisplayButtons addObject:_textFieldNameOfGame];


}

-(void)createDisplayGrid {

/*  _arrayGridPatterns = [[NSMutableArray alloc] initWithArray: _arrayGridsShell[_gridSelected]];


int boxWidth = _width/15;
int boxHeight = boxWidth;

int xstart =_width - 7* boxWidth;
int ystart = 2*boxHeight;



int xForGrid;
int yForGrid;
int sq;


for (sq = 1; sq<26; sq++) {

if (sq < 6) {
xForGrid =  xstart + (boxWidth * sq);
yForGrid = ystart;}
else {
if (sq < 11) {
xForGrid = xstart + (boxWidth * (sq-5));
yForGrid = ystart + boxWidth;}
else {
if (sq < 16){
xForGrid = xstart +(boxWidth * (sq-10));
yForGrid = ystart + 2 * boxWidth;}
else{
if (sq < 21){
xForGrid = xstart +(boxWidth * (sq-15));
yForGrid = ystart + 3 * boxWidth;}
else{
xForGrid = xstart + (boxWidth * (sq-20));
yForGrid = ystart+ 4 * boxWidth;}
}
}
}


UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
button.tag = sq;


button.frame = CGRectMake(xForGrid, yForGrid, boxWidth, boxHeight);
[button addTarget:self action:@selector(btnGridPressed:) forControlEvents:UIControlEventTouchUpInside];
button.backgroundColor = [UIColor whiteColor];
button.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:boxWidth];
NSString *markerText;

switch (_markerSelected) {
case 0:
markerText = @"\u26AA";
break;
case 1:
markerText = @"\u26AB";
break;
case 2:
markerText = @"\u272D";
break;
case 3:
markerText = @"\u272A";
break;
case 4:
markerText = @"\u25CF";
break;
case 5:
markerText = @"\u272A";
break;
case 6:
markerText = @"\u263c";
break;
case 7:
markerText = @"\u2600";
break;
case 8:
markerText = @"\u2726";
break;
default:
break;
}


if ([[_arrayGridPatterns objectAtIndex:button.tag] intValue] == 0) {

[button setTitle:@" " forState:UIControlStateNormal];


}

if ([[_arrayGridPatterns objectAtIndex:button.tag] intValue] == 1) {

[button setTitle:markerText forState:UIControlStateNormal];

}


button.layer.borderWidth=2.0f;
button.layer.borderColor=[[UIColor blackColor] CGColor];


[self.view addSubview:button];

}

*/
}
